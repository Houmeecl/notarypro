#!/bin/bash

echo "üîë PRUEBA DEL SISTEMA DE C√ìDIGOS DE CLIENTE RON"
echo "=============================================="
echo ""

# Colores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

BASE_URL="http://localhost:5000"

auth_request() {
    local method=$1
    local endpoint=$2
    local data=$3
    local token=$4
    
    if [ -n "$token" ]; then
        if [ "$method" = "GET" ]; then
            curl -s -H "Authorization: Bearer $token" "$BASE_URL$endpoint"
        else
            curl -s -X $method \
                 -H "Content-Type: application/json" \
                 -H "Authorization: Bearer $token" \
                 -d "$data" \
                 "$BASE_URL$endpoint"
        fi
    fi
}

show_response() {
    local title=$1
    local response=$2
    
    echo -e "${CYAN}üìã $title:${NC}"
    echo "$response" | jq '.' 2>/dev/null || echo "$response"
    echo ""
}

echo -e "${BLUE}üîê AUTENTICACI√ìN DE CERTIFICADOR${NC}"
echo "=================================="
echo ""

# Login como certificador
CERTIFIER_LOGIN=$(curl -s -X POST "$BASE_URL/api/auth/login" \
     -H "Content-Type: application/json" \
     -d '{"username":"realcertifier","password":"cert123456"}')

CERTIFIER_TOKEN=$(echo "$CERTIFIER_LOGIN" | jq -r '.data.accessToken' 2>/dev/null)

if [ "$CERTIFIER_TOKEN" = "null" ] || [ -z "$CERTIFIER_TOKEN" ]; then
    echo "Creando certificador para pruebas..."
    CERTIFIER_REGISTER=$(curl -s -X POST "$BASE_URL/api/auth/register" \
         -H "Content-Type: application/json" \
         -d '{
           "username": "codecertifier",
           "password": "code123456",
           "email": "codecert@notarypro.cl",
           "fullName": "Certificador C√≥digos",
           "role": "certifier",
           "platform": "notarypro"
         }')
    
    show_response "Certificador Creado" "$CERTIFIER_REGISTER"
    
    CERTIFIER_LOGIN=$(curl -s -X POST "$BASE_URL/api/auth/login" \
         -H "Content-Type: application/json" \
         -d '{"username":"codecertifier","password":"code123456"}')
    
    CERTIFIER_TOKEN=$(echo "$CERTIFIER_LOGIN" | jq -r '.data.accessToken' 2>/dev/null)
fi

if [ "$CERTIFIER_TOKEN" = "null" ] || [ -z "$CERTIFIER_TOKEN" ]; then
    echo -e "${RED}‚ùå Error: No se pudo autenticar certificador${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Certificador autenticado exitosamente${NC}"
echo ""

echo -e "${BLUE}üìÑ CREANDO DOCUMENTOS DE PRUEBA${NC}"
echo "==============================="
echo ""

# Crear documentos de muestra
SAMPLE_DOCS_RESPONSE=$(auth_request "POST" "/api/real-documents/create-sample" "" "$CERTIFIER_TOKEN")
show_response "Documentos de Muestra" "$SAMPLE_DOCS_RESPONSE"

echo -e "${BLUE}üîë GENERANDO C√ìDIGO DE CLIENTE RON${NC}"
echo "================================="
echo ""

# Generar c√≥digo de acceso
FUTURE_DATE=$(date -d '+2 hours' -Iseconds)
GENERATE_CODE_RESPONSE=$(auth_request "POST" "/api/ron-client/generate-access" "{
  \"sessionId\": \"JITSI-TEST-$(date +%s)\",
  \"clientId\": 1,
  \"documentId\": 1,
  \"sessionType\": \"jitsi\",
  \"expirationHours\": 24
}" "$CERTIFIER_TOKEN")

show_response "C√≥digo de Acceso Generado" "$GENERATE_CODE_RESPONSE"

# Extraer c√≥digo de acceso
ACCESS_CODE=$(echo "$GENERATE_CODE_RESPONSE" | jq -r '.access.accessCode' 2>/dev/null)

if [ "$ACCESS_CODE" != "null" ] && [ -n "$ACCESS_CODE" ]; then
    echo -e "${GREEN}‚úÖ C√≥digo generado: $ACCESS_CODE${NC}"
    echo ""
    
    echo -e "${BLUE}üîç PROBANDO C√ìDIGO DE CLIENTE${NC}"
    echo "============================="
    echo ""
    
    # Obtener informaci√≥n del c√≥digo sin usarlo
    CODE_INFO_RESPONSE=$(curl -s "$BASE_URL/api/ron-client/code-info/$ACCESS_CODE")
    show_response "Informaci√≥n del C√≥digo" "$CODE_INFO_RESPONSE"
    
    # Validar y usar c√≥digo (simular cliente)
    echo "Validando c√≥digo como cliente..."
    VALIDATE_CODE_RESPONSE=$(curl -s "$BASE_URL/api/ron-client/access/$ACCESS_CODE")
    show_response "Validaci√≥n del C√≥digo" "$VALIDATE_CODE_RESPONSE"
    
    # Obtener QR del c√≥digo
    echo "Obteniendo c√≥digo QR..."
    QR_RESPONSE=$(curl -s "$BASE_URL/api/ron-client/qr/$ACCESS_CODE?format=json")
    show_response "C√≥digo QR" "$QR_RESPONSE"
    
    # Obtener c√≥digos del certificador
    echo "Obteniendo c√≥digos del certificador..."
    MY_CODES_RESPONSE=$(auth_request "GET" "/api/ron-client/my-codes?limit=5" "" "$CERTIFIER_TOKEN")
    show_response "Mis C√≥digos" "$MY_CODES_RESPONSE"
    
    # Enviar c√≥digo por email (simulado)
    echo "Enviando c√≥digo por email..."
    SEND_EMAIL_RESPONSE=$(auth_request "POST" "/api/ron-client/send-access" "{
      \"accessCode\": \"$ACCESS_CODE\",
      \"method\": \"email\",
      \"recipient\": \"cliente@test.com\"
    }" "$CERTIFIER_TOKEN")
    show_response "Env√≠o por Email" "$SEND_EMAIL_RESPONSE"
    
    # Obtener estad√≠sticas
    echo "Obteniendo estad√≠sticas de c√≥digos..."
    STATS_RESPONSE=$(auth_request "GET" "/api/ron-client/stats" "" "$CERTIFIER_TOKEN")
    show_response "Estad√≠sticas de C√≥digos" "$STATS_RESPONSE"
    
    echo -e "${CYAN}üåê URLs GENERADAS:${NC}"
    echo ""
    
    DIRECT_URL=$(echo "$GENERATE_CODE_RESPONSE" | jq -r '.access.directUrl' 2>/dev/null)
    EMBED_URL=$(echo "$GENERATE_CODE_RESPONSE" | jq -r '.access.embedUrl' 2>/dev/null)
    
    echo "üì± URLs de Acceso:"
    echo "  ‚Ä¢ Acceso directo: $DIRECT_URL"
    echo "  ‚Ä¢ Frontend: http://localhost:5000/ron-client-access/$ACCESS_CODE"
    echo "  ‚Ä¢ Embed: $EMBED_URL"
    echo "  ‚Ä¢ QR: http://localhost:5000/api/ron-client/qr/$ACCESS_CODE"
    echo ""
    echo "üñ•Ô∏è URLs del Certificador:"
    echo "  ‚Ä¢ Generar c√≥digos: http://localhost:5000/ron-generate-client-code"
    echo "  ‚Ä¢ Dashboard RON: http://localhost:5000/ron-platform"
    echo ""
    
else
    echo -e "${RED}‚ùå No se pudo generar c√≥digo de acceso${NC}"
fi

echo -e "${BLUE}üìä PROBANDO SISTEMA JITSI${NC}"
echo "========================="
echo ""

# Configuraci√≥n Jitsi
JITSI_CONFIG_RESPONSE=$(curl -s "$BASE_URL/api/ron-jitsi/config")
show_response "Configuraci√≥n Jitsi" "$JITSI_CONFIG_RESPONSE"

# Dashboard RON Jitsi
JITSI_DASHBOARD_RESPONSE=$(auth_request "GET" "/api/ron-jitsi/dashboard" "" "$CERTIFIER_TOKEN")
show_response "Dashboard Jitsi" "$JITSI_DASHBOARD_RESPONSE"

# Crear sala de prueba
TEST_ROOM_RESPONSE=$(auth_request "GET" "/api/ron-jitsi/test-room" "" "$CERTIFIER_TOKEN")
show_response "Sala de Prueba" "$TEST_ROOM_RESPONSE"

echo -e "${PURPLE}üéØ RESUMEN DEL SISTEMA DE C√ìDIGOS${NC}"
echo "================================="
echo ""

echo -e "${GREEN}‚úÖ FUNCIONALIDADES IMPLEMENTADAS:${NC}"
echo ""
echo "üîë Generaci√≥n de C√≥digos:"
echo "  ‚Ä¢ C√≥digos √∫nicos con formato RON-XXXXXX-XXXXXX"
echo "  ‚Ä¢ C√≥digos QR con informaci√≥n completa"
echo "  ‚Ä¢ URLs de acceso directo"
echo "  ‚Ä¢ Expiraci√≥n configurable (24h por defecto)"
echo ""
echo "üì± Formatos de Env√≠o:"
echo "  ‚Ä¢ Email HTML con QR incluido"
echo "  ‚Ä¢ SMS con enlace directo"
echo "  ‚Ä¢ WhatsApp con formato optimizado"
echo "  ‚Ä¢ C√≥digo QR para escanear"
echo ""
echo "üîí Seguridad:"
echo "  ‚Ä¢ C√≥digos √∫nicos y temporales"
echo "  ‚Ä¢ Validaci√≥n de expiraci√≥n"
echo "  ‚Ä¢ Auditor√≠a de uso completa"
echo "  ‚Ä¢ Acceso controlado por rol"
echo ""
echo "üìä Gesti√≥n:"
echo "  ‚Ä¢ Dashboard de c√≥digos generados"
echo "  ‚Ä¢ Estad√≠sticas de uso"
echo "  ‚Ä¢ Limpieza autom√°tica de expirados"
echo "  ‚Ä¢ Regeneraci√≥n de c√≥digos"
echo ""

echo -e "${CYAN}üìã APIs DE C√ìDIGOS DISPONIBLES:${NC}"
echo ""
echo "üîß Para Certificadores:"
echo "  ‚Ä¢ POST /api/ron-client/generate-access"
echo "  ‚Ä¢ GET  /api/ron-client/my-codes"
echo "  ‚Ä¢ POST /api/ron-client/send-access"
echo "  ‚Ä¢ POST /api/ron-client/regenerate/:code"
echo "  ‚Ä¢ GET  /api/ron-client/stats"
echo ""
echo "üë§ Para Clientes:"
echo "  ‚Ä¢ GET  /api/ron-client/access/:code"
echo "  ‚Ä¢ GET  /api/ron-client/code-info/:code"
echo "  ‚Ä¢ GET  /api/ron-client/qr/:code"
echo ""

echo -e "${YELLOW}üåê URLS FRONTEND:${NC}"
echo ""
echo "üì± Para Clientes:"
echo "  ‚Ä¢ Acceso con c√≥digo: http://localhost:5000/ron-client-access"
echo "  ‚Ä¢ Acceso directo: http://localhost:5000/ron-client-access/CODIGO"
echo ""
echo "üë®‚Äçüíº Para Certificadores:"
echo "  ‚Ä¢ Generar c√≥digos: http://localhost:5000/ron-generate-client-code"
echo "  ‚Ä¢ Dashboard: http://localhost:5000/certifier-dashboard"
echo ""

echo -e "${GREEN}üéâ FLUJO COMPLETO DE USO:${NC}"
echo ""
echo "1Ô∏è‚É£ Certificador genera c√≥digo para cliente"
echo "2Ô∏è‚É£ Cliente recibe c√≥digo por email/SMS/WhatsApp"
echo "3Ô∏è‚É£ Cliente accede con c√≥digo o escanea QR"
echo "4Ô∏è‚É£ Cliente es dirigido a videollamada Jitsi"
echo "5Ô∏è‚É£ Sesi√≥n RON se ejecuta con grabaci√≥n"
echo "6Ô∏è‚É£ Certificador completa y certifica documento"
echo ""

echo -e "${BLUE}üöÄ SISTEMA DE C√ìDIGOS COMPLETAMENTE FUNCIONAL${NC}"
echo ""
echo "Caracter√≠sticas:"
echo "‚úÖ Generaci√≥n autom√°tica de c√≥digos √∫nicos"
echo "‚úÖ C√≥digos QR con informaci√≥n completa"
echo "‚úÖ M√∫ltiples formatos de env√≠o"
echo "‚úÖ Validaci√≥n y expiraci√≥n autom√°tica"
echo "‚úÖ Integraci√≥n completa con Jitsi Meet"
echo "‚úÖ Auditor√≠a y estad√≠sticas completas"
echo "‚úÖ Interfaz de usuario intuitiva"
echo ""
echo "¬°Sistema de c√≥digos de cliente RON listo para producci√≥n!"