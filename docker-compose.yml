version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: notaryvecino-db
    environment:
      POSTGRES_DB: notaryvecino
      POSTGRES_USER: notaryuser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-notary_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - notaryvecino-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notaryuser -d notaryvecino"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: notaryvecino-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - notaryvecino-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicaci√≥n NotaryVecino
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: notaryvecino-app
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://notaryuser:${DB_PASSWORD:-notary_secure_password}@postgres:5432/notaryvecino
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-notary-vecino-super-secret-production-2025}
      JWT_EXPIRES_IN: 24h
      SESSION_SECRET: ${SESSION_SECRET:-notary-vecino-session-secret-production-2025}
      
      # APIs externas
      AGORA_APP_ID: ${AGORA_APP_ID}
      AGORA_APP_CERTIFICATE: ${AGORA_APP_CERTIFICATE}
      GETAPI_API_KEY: ${GETAPI_API_KEY}
      GETAPI_BASE_URL: https://api.getapi.com
      ZOHO_CLIENT_ID: ${ZOHO_CLIENT_ID}
      ZOHO_CLIENT_SECRET: ${ZOHO_CLIENT_SECRET}
      ZOHO_REFRESH_TOKEN: ${ZOHO_REFRESH_TOKEN}
      MERCADOPAGO_ACCESS_TOKEN: ${MERCADOPAGO_ACCESS_TOKEN}
      MERCADOPAGO_PUBLIC_KEY: ${MERCADOPAGO_PUBLIC_KEY}
      POS_PAYMENT_API_KEY: ${POS_PAYMENT_API_KEY}
      TUU_PAYMENT_URL: https://api.tuu.cl
      
      # AWS S3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-notaryvecino-documents}
      AWS_REGION: ${AWS_REGION:-us-west-2}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Email
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      
      # WhatsApp
      WHATSAPP_API_KEY: ${WHATSAPP_API_KEY}
      WHATSAPP_PHONE_NUMBER: ${WHATSAPP_PHONE_NUMBER}
      
    ports:
      - "5000:5000"
    volumes:
      - ./uploads:/app/uploads
      - ./docs:/app/docs
      - app_logs:/app/logs
    networks:
      - notaryvecino-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/auth/verify-token"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: notaryvecino-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
      - ./docs:/var/www/docs:ro
    networks:
      - notaryvecino-network
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoreo con Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: notaryvecino-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - notaryvecino-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: notaryvecino-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - notaryvecino-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  notaryvecino-network:
    driver: bridge